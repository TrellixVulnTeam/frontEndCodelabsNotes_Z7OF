{"ast":null,"code":"import _classCallCheck from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport var ConnectableObservable = /*#__PURE__*/function (_Observable) {\n  _inherits(ConnectableObservable, _Observable);\n\n  var _super = _createSuper(ConnectableObservable);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this;\n\n    _classCallCheck(this, ConnectableObservable);\n\n    _this = _super.call(this);\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n\n    return _this;\n  }\n\n  _createClass(ConnectableObservable, [{\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      return this.getSubject().subscribe(subscriber);\n    }\n  }, {\n    key: \"getSubject\",\n    value: function getSubject() {\n      var subject = this._subject;\n\n      if (!subject || subject.isStopped) {\n        this._subject = this.subjectFactory();\n      }\n\n      return this._subject;\n    }\n  }, {\n    key: \"_teardown\",\n    value: function _teardown() {\n      this._refCount = 0;\n      var _connection = this._connection;\n      this._subject = this._connection = null;\n      _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n    }\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n\n      var connection = this._connection;\n\n      if (!connection) {\n        connection = this._connection = new Subscription();\n        var subject = this.getSubject();\n        connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, function () {\n          _this2._teardown();\n\n          subject.complete();\n        }, function (err) {\n          _this2._teardown();\n\n          subject.error(err);\n        }, function () {\n          return _this2._teardown();\n        })));\n\n        if (connection.closed) {\n          this._connection = null;\n          connection = Subscription.EMPTY;\n        }\n      }\n\n      return connection;\n    }\n  }, {\n    key: \"refCount\",\n    value: function refCount() {\n      return higherOrderRefCount()(this);\n    }\n  }]);\n\n  return ConnectableObservable;\n}(Observable);","map":{"version":3,"sources":["../../../../src/internal/observable/ConnectableObservable.ts"],"names":[],"mappings":";;;;AACA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,YAAT,QAA6B,iBAA7B;AACA,SAAS,QAAQ,IAAI,mBAArB,QAAgD,uBAAhD;AACA,SAAS,wBAAT,QAAyC,iCAAzC;AACA,SAAS,OAAT,QAAwB,cAAxB;AASA,WAAa,qBAAb;AAAA;;AAAA;;AAgBE,iCAAmB,MAAnB,EAAoD,cAApD,EAAoF;AAAA;;AAAA;;AAClF;AADiB,UAAA,MAAA,GAAA,MAAA;AAAiC,UAAA,cAAA,GAAA,cAAA;AAf1C,UAAA,QAAA,GAA8B,IAA9B;AACA,UAAA,SAAA,GAAoB,CAApB;AACA,UAAA,WAAA,GAAmC,IAAnC;;AAkBR,QAAI,OAAO,CAAC,MAAD,CAAX,EAAqB;AACnB,YAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACD;;AAPiF;AAQnF;;AAxBH;AAAA;AAAA,WA2BY,oBAAW,UAAX,EAAoC;AAC5C,aAAO,KAAK,UAAL,GAAkB,SAAlB,CAA4B,UAA5B,CAAP;AACD;AA7BH;AAAA;AAAA,WA+BY,sBAAU;AAClB,UAAM,OAAO,GAAG,KAAK,QAArB;;AACA,UAAI,CAAC,OAAD,IAAY,OAAO,CAAC,SAAxB,EAAmC;AACjC,aAAK,QAAL,GAAgB,KAAK,cAAL,EAAhB;AACD;;AACD,aAAO,KAAK,QAAZ;AACD;AArCH;AAAA;AAAA,WAuCY,qBAAS;AACjB,WAAK,SAAL,GAAiB,CAAjB;AACA,UAAQ,WAAR,GAAwB,IAAxB,CAAQ,WAAR;AACA,WAAK,QAAL,GAAgB,KAAK,WAAL,GAAmB,IAAnC;AACA,MAAA,WAAW,KAAA,IAAX,IAAA,WAAW,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAA,WAAW,CAAE,WAAb,EAAA;AACD;AA5CH;AAAA;AAAA,WAkDE,mBAAO;AAAA;;AACL,UAAI,UAAU,GAAG,KAAK,WAAtB;;AACA,UAAI,CAAC,UAAL,EAAiB;AACf,QAAA,UAAU,GAAG,KAAK,WAAL,GAAmB,IAAI,YAAJ,EAAhC;AACA,YAAM,OAAO,GAAG,KAAK,UAAL,EAAhB;AACA,QAAA,UAAU,CAAC,GAAX,CACE,KAAK,MAAL,CAAY,SAAZ,CACE,wBAAwB,CACtB,OADsB,EAEtB,SAFsB,EAGtB,YAAK;AACH,UAAA,MAAI,CAAC,SAAL;;AACA,UAAA,OAAO,CAAC,QAAR;AACD,SANqB,EAOtB,UAAC,GAAD,EAAQ;AACN,UAAA,MAAI,CAAC,SAAL;;AACA,UAAA,OAAO,CAAC,KAAR,CAAc,GAAd;AACD,SAVqB,EAWtB;AAAA,iBAAM,MAAI,CAAC,SAAL,EAAN;AAAA,SAXsB,CAD1B,CADF;;AAkBA,YAAI,UAAU,CAAC,MAAf,EAAuB;AACrB,eAAK,WAAL,GAAmB,IAAnB;AACA,UAAA,UAAU,GAAG,YAAY,CAAC,KAA1B;AACD;AACF;;AACD,aAAO,UAAP;AACD;AA/EH;AAAA;AAAA,WAqFE,oBAAQ;AACN,aAAO,mBAAmB,GAAG,IAAH,CAA1B;AACD;AAvFH;;AAAA;AAAA,EAA8C,UAA9C","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\nexport class ConnectableObservable extends Observable {\n    constructor(source, subjectFactory) {\n        super();\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        this._subject = null;\n        this._refCount = 0;\n        this._connection = null;\n        if (hasLift(source)) {\n            this.lift = source.lift;\n        }\n    }\n    _subscribe(subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    }\n    getSubject() {\n        const subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    }\n    _teardown() {\n        this._refCount = 0;\n        const { _connection } = this;\n        this._subject = this._connection = null;\n        _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n    }\n    connect() {\n        let connection = this._connection;\n        if (!connection) {\n            connection = this._connection = new Subscription();\n            const subject = this.getSubject();\n            connection.add(this.source.subscribe(createOperatorSubscriber(subject, undefined, () => {\n                this._teardown();\n                subject.complete();\n            }, (err) => {\n                this._teardown();\n                subject.error(err);\n            }, () => this._teardown())));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription.EMPTY;\n            }\n        }\n        return connection;\n    }\n    refCount() {\n        return higherOrderRefCount()(this);\n    }\n}\n//# sourceMappingURL=ConnectableObservable.js.map"]},"metadata":{},"sourceType":"module"}