{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { asyncScheduler } from '../scheduler/async';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function bufferTime(bufferTimeSpan) {\n  var _a, _b;\n\n  for (var _len = arguments.length, otherArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherArgs[_key - 1] = arguments[_key];\n  }\n\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxBufferSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var bufferRecords = [];\n    var restartOnEmit = false;\n\n    var emit = function emit(record) {\n      var buffer = record.buffer,\n          subs = record.subs;\n      subs.unsubscribe();\n      arrRemove(bufferRecords, record);\n      subscriber.next(buffer);\n      restartOnEmit && startBuffer();\n    };\n\n    var startBuffer = function startBuffer() {\n      if (bufferRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var buffer = [];\n        var record = {\n          buffer: buffer,\n          subs: subs\n        };\n        bufferRecords.push(record);\n        executeSchedule(subs, scheduler, function () {\n          return emit(record);\n        }, bufferTimeSpan);\n      }\n    };\n\n    if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {\n      executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);\n    } else {\n      restartOnEmit = true;\n    }\n\n    startBuffer();\n    var bufferTimeSubscriber = createOperatorSubscriber(subscriber, function (value) {\n      var recordsCopy = bufferRecords.slice();\n\n      var _iterator = _createForOfIteratorHelper(recordsCopy),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var record = _step.value;\n          var buffer = record.buffer;\n          buffer.push(value);\n          maxBufferSize <= buffer.length && emit(record);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }, function () {\n      while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {\n        subscriber.next(bufferRecords.shift().buffer);\n      }\n\n      bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();\n      subscriber.complete();\n      subscriber.unsubscribe();\n    }, undefined, function () {\n      return bufferRecords = null;\n    });\n    source.subscribe(bufferTimeSubscriber);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/bufferTime.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { asyncScheduler } from '../scheduler/async';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function bufferTime(bufferTimeSpan, ...otherArgs) {\n    var _a, _b;\n    const scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n    const bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n    const maxBufferSize = otherArgs[1] || Infinity;\n    return operate((source, subscriber) => {\n        let bufferRecords = [];\n        let restartOnEmit = false;\n        const emit = (record) => {\n            const { buffer, subs } = record;\n            subs.unsubscribe();\n            arrRemove(bufferRecords, record);\n            subscriber.next(buffer);\n            restartOnEmit && startBuffer();\n        };\n        const startBuffer = () => {\n            if (bufferRecords) {\n                const subs = new Subscription();\n                subscriber.add(subs);\n                const buffer = [];\n                const record = {\n                    buffer,\n                    subs,\n                };\n                bufferRecords.push(record);\n                executeSchedule(subs, scheduler, () => emit(record), bufferTimeSpan);\n            }\n        };\n        if (bufferCreationInterval !== null && bufferCreationInterval >= 0) {\n            executeSchedule(subscriber, scheduler, startBuffer, bufferCreationInterval, true);\n        }\n        else {\n            restartOnEmit = true;\n        }\n        startBuffer();\n        const bufferTimeSubscriber = createOperatorSubscriber(subscriber, (value) => {\n            const recordsCopy = bufferRecords.slice();\n            for (const record of recordsCopy) {\n                const { buffer } = record;\n                buffer.push(value);\n                maxBufferSize <= buffer.length && emit(record);\n            }\n        }, () => {\n            while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {\n                subscriber.next(bufferRecords.shift().buffer);\n            }\n            bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();\n            subscriber.complete();\n            subscriber.unsubscribe();\n        }, undefined, () => (bufferRecords = null));\n        source.subscribe(bufferTimeSubscriber);\n    });\n}\n//# sourceMappingURL=bufferTime.js.map"]},"metadata":{},"sourceType":"module"}