{"ast":null,"code":"import _toConsumableArray from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var resultSelector = popResultSelector(args);\n  return resultSelector ? pipe(combineLatest.apply(void 0, args), mapOneOrManyArgs(resultSelector)) : operate(function (source, subscriber) {\n    combineLatestInit([source].concat(_toConsumableArray(argsOrArgArray(args))))(subscriber);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/combineLatest.ts"],"names":[],"mappings":";AAAA,SAAS,iBAAT,QAAkC,6BAAlC;AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,gBAAT,QAAiC,0BAAjC;AACA,SAAS,IAAT,QAAqB,cAArB;AACA,SAAS,iBAAT,QAAkC,cAAlC;AAoBA,OAAM,SAAU,aAAV,GAA2F;AAAA,oCAA1D,IAA0D;AAA1D,IAAA,IAA0D;AAAA;;AAC/F,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAD,CAAxC;AACA,SAAO,cAAc,GACjB,IAAI,CAAC,aAAa,MAAb,SAAkB,IAAlB,CAAD,EAA0D,gBAAgB,CAAC,cAAD,CAA1E,CADa,GAEjB,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AAC7B,IAAA,iBAAiB,EAAE,MAAF,4BAAa,cAAc,CAAC,IAAD,CAA3B,GAAjB,CAAqD,UAArD;AACD,GAFM,CAFX;AAKD","sourceRoot":"","sourcesContent":["import { combineLatestInit } from '../observable/combineLatest';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\nexport function combineLatest(...args) {\n    const resultSelector = popResultSelector(args);\n    return resultSelector\n        ? pipe(combineLatest(...args), mapOneOrManyArgs(resultSelector))\n        : operate((source, subscriber) => {\n            combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\n        });\n}\n//# sourceMappingURL=combineLatest.js.map"]},"metadata":{},"sourceType":"module"}