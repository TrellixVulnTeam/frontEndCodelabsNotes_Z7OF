{"ast":null,"code":"import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var _options$connector = options.connector,\n      connector = _options$connector === void 0 ? function () {\n    return new Subject();\n  } : _options$connector,\n      _options$resetOnError = options.resetOnError,\n      resetOnError = _options$resetOnError === void 0 ? true : _options$resetOnError,\n      _options$resetOnCompl = options.resetOnComplete,\n      resetOnComplete = _options$resetOnCompl === void 0 ? true : _options$resetOnCompl,\n      _options$resetOnRefCo = options.resetOnRefCountZero,\n      resetOnRefCountZero = _options$resetOnRefCo === void 0 ? true : _options$resetOnRefCo;\n  return function (wrapperSource) {\n    var connection = null;\n    var resetConnection = null;\n    var subject = null;\n    var refCount = 0;\n    var hasCompleted = false;\n    var hasErrored = false;\n\n    var cancelReset = function cancelReset() {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = null;\n    };\n\n    var reset = function reset() {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n\n    var resetAndUnsubscribe = function resetAndUnsubscribe() {\n      var conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n\n    return operate(function (source, subscriber) {\n      refCount++;\n\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(function () {\n        refCount--;\n\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        connection = new SafeSubscriber({\n          next: function next(value) {\n            return dest.next(value);\n          },\n          error: function error(err) {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: function complete() {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset(reset, on) {\n  if (on === true) {\n    reset();\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n    args[_key - 2] = arguments[_key];\n  }\n\n  return on.apply(void 0, args).pipe(take(1)).subscribe(function () {\n    return reset();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/share.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { operate } from '../util/lift';\nexport function share(options = {}) {\n    const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n    return (wrapperSource) => {\n        let connection = null;\n        let resetConnection = null;\n        let subject = null;\n        let refCount = 0;\n        let hasCompleted = false;\n        let hasErrored = false;\n        const cancelReset = () => {\n            resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n            resetConnection = null;\n        };\n        const reset = () => {\n            cancelReset();\n            connection = subject = null;\n            hasCompleted = hasErrored = false;\n        };\n        const resetAndUnsubscribe = () => {\n            const conn = connection;\n            reset();\n            conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n        };\n        return operate((source, subscriber) => {\n            refCount++;\n            if (!hasErrored && !hasCompleted) {\n                cancelReset();\n            }\n            const dest = (subject = subject !== null && subject !== void 0 ? subject : connector());\n            subscriber.add(() => {\n                refCount--;\n                if (refCount === 0 && !hasErrored && !hasCompleted) {\n                    resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n                }\n            });\n            dest.subscribe(subscriber);\n            if (!connection) {\n                connection = new SafeSubscriber({\n                    next: (value) => dest.next(value),\n                    error: (err) => {\n                        hasErrored = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnError, err);\n                        dest.error(err);\n                    },\n                    complete: () => {\n                        hasCompleted = true;\n                        cancelReset();\n                        resetConnection = handleReset(reset, resetOnComplete);\n                        dest.complete();\n                    },\n                });\n                from(source).subscribe(connection);\n            }\n        })(wrapperSource);\n    };\n}\nfunction handleReset(reset, on, ...args) {\n    if (on === true) {\n        reset();\n        return null;\n    }\n    if (on === false) {\n        return null;\n    }\n    return on(...args)\n        .pipe(take(1))\n        .subscribe(() => reset());\n}\n//# sourceMappingURL=share.js.map"]},"metadata":{},"sourceType":"module"}