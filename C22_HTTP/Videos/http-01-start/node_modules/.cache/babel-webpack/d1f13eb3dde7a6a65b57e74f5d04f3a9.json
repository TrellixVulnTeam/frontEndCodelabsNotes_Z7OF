{"ast":null,"code":"import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector) {\n  var concurrent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;\n\n  if (isFunction(resultSelector)) {\n    return mergeMap(function (a, i) {\n      return map(function (b, ii) {\n        return resultSelector(a, b, i, ii);\n      })(innerFrom(project(a, i)));\n    }, concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/mergeMap.ts"],"names":[],"mappings":"AACA,SAAS,GAAT,QAAoB,OAApB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,UAAT,QAA2B,oBAA3B;AA6EA,OAAM,SAAU,QAAV,CACJ,OADI,EAEJ,cAFI,EAGyB;AAAA,MAA7B,UAA6B,uEAAR,QAAQ;;AAE7B,MAAI,UAAU,CAAC,cAAD,CAAd,EAAgC;AAE9B,WAAO,QAAQ,CAAC,UAAC,CAAD,EAAI,CAAJ;AAAA,aAAU,GAAG,CAAC,UAAC,CAAD,EAAS,EAAT;AAAA,eAAwB,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,EAAV,CAAtC;AAAA,OAAD,CAAH,CAAyD,SAAS,CAAC,OAAO,CAAC,CAAD,EAAI,CAAJ,CAAR,CAAlE,CAAV;AAAA,KAAD,EAA+F,UAA/F,CAAf;AACD,GAHD,MAGO,IAAI,OAAO,cAAP,KAA0B,QAA9B,EAAwC;AAC7C,IAAA,UAAU,GAAG,cAAb;AACD;;AAED,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT;AAAA,WAAwB,cAAc,CAAC,MAAD,EAAS,UAAT,EAAqB,OAArB,EAA8B,UAA9B,CAAtC;AAAA,GAAD,CAAd;AACD","sourceRoot":"","sourcesContent":["import { map } from './map';\nimport { innerFrom } from '../observable/innerFrom';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\nexport function mergeMap(project, resultSelector, concurrent = Infinity) {\n    if (isFunction(resultSelector)) {\n        return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n    }\n    else if (typeof resultSelector === 'number') {\n        concurrent = resultSelector;\n    }\n    return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n//# sourceMappingURL=mergeMap.js.map"]},"metadata":{},"sourceType":"module"}