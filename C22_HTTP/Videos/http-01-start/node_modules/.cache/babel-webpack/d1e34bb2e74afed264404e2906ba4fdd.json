{"ast":null,"code":"import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer() {\n  var dueTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var intervalOrScheduler = arguments.length > 1 ? arguments[1] : undefined;\n  var scheduler = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : asyncScheduler;\n  var intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable(function (subscriber) {\n    var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n\n    if (due < 0) {\n      due = 0;\n    }\n\n    var n = 0;\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          this.schedule(undefined, intervalDuration);\n        } else {\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/observable/timer.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,KAAK,IAAI,cAAlB,QAAwC,oBAAxC;AACA,SAAS,WAAT,QAA4B,qBAA5B;AACA,SAAS,WAAT,QAA4B,gBAA5B;AAgIA,OAAM,SAAU,KAAV,GAGqC;AAAA,MAFzC,OAEyC,uEAFhB,CAEgB;AAAA,MADzC,mBACyC;AAAA,MAAzC,SAAyC,uEAAd,cAAc;AAIzC,MAAI,gBAAgB,GAAG,CAAC,CAAxB;;AAEA,MAAI,mBAAmB,IAAI,IAA3B,EAAiC;AAI/B,QAAI,WAAW,CAAC,mBAAD,CAAf,EAAsC;AACpC,MAAA,SAAS,GAAG,mBAAZ;AACD,KAFD,MAEO;AAGL,MAAA,gBAAgB,GAAG,mBAAnB;AACD;AACF;;AAED,SAAO,IAAI,UAAJ,CAAe,UAAC,UAAD,EAAe;AAInC,QAAI,GAAG,GAAG,WAAW,CAAC,OAAD,CAAX,GAAuB,CAAC,OAAD,GAAW,SAAU,CAAC,GAAX,EAAlC,GAAqD,OAA/D;;AAEA,QAAI,GAAG,GAAG,CAAV,EAAa;AAEX,MAAA,GAAG,GAAG,CAAN;AACD;;AAGD,QAAI,CAAC,GAAG,CAAR;AAGA,WAAO,SAAS,CAAC,QAAV,CAAmB,YAAA;AACxB,UAAI,CAAC,UAAU,CAAC,MAAhB,EAAwB;AAEtB,QAAA,UAAU,CAAC,IAAX,CAAgB,CAAC,EAAjB;;AAEA,YAAI,KAAK,gBAAT,EAA2B;AAGzB,eAAK,QAAL,CAAc,SAAd,EAAyB,gBAAzB;AACD,SAJD,MAIO;AAEL,UAAA,UAAU,CAAC,QAAX;AACD;AACF;AACF,KAdM,EAcJ,GAdI,CAAP;AAeD,GA9BM,CAAP;AA+BD","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\nexport function timer(dueTime = 0, intervalOrScheduler, scheduler = asyncScheduler) {\n    let intervalDuration = -1;\n    if (intervalOrScheduler != null) {\n        if (isScheduler(intervalOrScheduler)) {\n            scheduler = intervalOrScheduler;\n        }\n        else {\n            intervalDuration = intervalOrScheduler;\n        }\n    }\n    return new Observable((subscriber) => {\n        let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n        if (due < 0) {\n            due = 0;\n        }\n        let n = 0;\n        return scheduler.schedule(function () {\n            if (!subscriber.closed) {\n                subscriber.next(n++);\n                if (0 <= intervalDuration) {\n                    this.schedule(undefined, intervalDuration);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        }, due);\n    });\n}\n//# sourceMappingURL=timer.js.map"]},"metadata":{},"sourceType":"module"}