{"ast":null,"code":"import _toConsumableArray from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  var resultSelector = popResultSelector(args);\n  var sources = argsOrArgArray(args);\n  return sources.length ? new Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n\n    var _loop = function _loop(sourceIndex) {\n      innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, _toConsumableArray(result)) : result);\n\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop(sourceIndex);\n    }\n\n    return function () {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}","map":{"version":3,"sources":["../../../../src/internal/observable/zip.ts"],"names":[],"mappings":";AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,SAAT,QAA0B,aAA1B;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,KAAT,QAAsB,SAAtB;AACA,SAAS,wBAAT,QAAyC,iCAAzC;AACA,SAAS,iBAAT,QAAkC,cAAlC;AA4CA,OAAM,SAAU,GAAV,GAAgC;AAAA,oCAAf,IAAe;AAAf,IAAA,IAAe;AAAA;;AACpC,MAAM,cAAc,GAAG,iBAAiB,CAAC,IAAD,CAAxC;AAEA,MAAM,OAAO,GAAG,cAAc,CAAC,IAAD,CAA9B;AAEA,SAAO,OAAO,CAAC,MAAR,GACH,IAAI,UAAJ,CAA0B,UAAC,UAAD,EAAe;AAGvC,QAAI,OAAO,GAAgB,OAAO,CAAC,GAAR,CAAY;AAAA,aAAM,EAAN;AAAA,KAAZ,CAA3B;AAKA,QAAI,SAAS,GAAG,OAAO,CAAC,GAAR,CAAY;AAAA,aAAM,KAAN;AAAA,KAAZ,CAAhB;AAGA,IAAA,UAAU,CAAC,GAAX,CAAe,YAAK;AAClB,MAAA,OAAO,GAAG,SAAS,GAAG,IAAtB;AACD,KAFD;;AAXuC,+BAkB9B,WAlB8B;AAmBrC,MAAA,SAAS,CAAC,OAAO,CAAC,WAAD,CAAR,CAAT,CAAgC,SAAhC,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAU;AACR,QAAA,OAAO,CAAC,WAAD,CAAP,CAAqB,IAArB,CAA0B,KAA1B;;AAIA,YAAI,OAAO,CAAC,KAAR,CAAc,UAAC,MAAD;AAAA,iBAAY,MAAM,CAAC,MAAnB;AAAA,SAAd,CAAJ,EAA8C;AAC5C,cAAM,MAAM,GAAQ,OAAO,CAAC,GAAR,CAAY,UAAC,MAAD;AAAA,mBAAY,MAAM,CAAC,KAAP,EAAZ;AAAA,WAAZ,CAApB;AAEA,UAAA,UAAU,CAAC,IAAX,CAAgB,cAAc,GAAG,cAAc,MAAd,4BAAkB,MAAlB,EAAH,GAA+B,MAA7D;;AAIA,cAAI,OAAO,CAAC,IAAR,CAAa,UAAC,MAAD,EAAS,CAAT;AAAA,mBAAe,CAAC,MAAM,CAAC,MAAR,IAAkB,SAAS,CAAC,CAAD,CAA1C;AAAA,WAAb,CAAJ,EAAiE;AAC/D,YAAA,UAAU,CAAC,QAAX;AACD;AACF;AACF,OAlBqB,EAmBtB,YAAK;AAGH,QAAA,SAAS,CAAC,WAAD,CAAT,GAAyB,IAAzB;AAIA,SAAC,OAAO,CAAC,WAAD,CAAP,CAAqB,MAAtB,IAAgC,UAAU,CAAC,QAAX,EAAhC;AACD,OA3BqB,CAD1B;AAnBqC;;AAkBvC,SAAK,IAAI,WAAW,GAAG,CAAvB,EAA0B,CAAC,UAAU,CAAC,MAAZ,IAAsB,WAAW,GAAG,OAAO,CAAC,MAAtE,EAA8E,WAAW,EAAzF,EAA6F;AAAA,YAApF,WAAoF;AAgC5F;;AAGD,WAAO,YAAK;AACV,MAAA,OAAO,GAAG,SAAS,GAAG,IAAtB;AACD,KAFD;AAGD,GAxDD,CADG,GA0DH,KA1DJ;AA2DD","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { innerFrom } from './innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { createOperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\nexport function zip(...args) {\n    const resultSelector = popResultSelector(args);\n    const sources = argsOrArgArray(args);\n    return sources.length\n        ? new Observable((subscriber) => {\n            let buffers = sources.map(() => []);\n            let completed = sources.map(() => false);\n            subscriber.add(() => {\n                buffers = completed = null;\n            });\n            for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n                innerFrom(sources[sourceIndex]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                    buffers[sourceIndex].push(value);\n                    if (buffers.every((buffer) => buffer.length)) {\n                        const result = buffers.map((buffer) => buffer.shift());\n                        subscriber.next(resultSelector ? resultSelector(...result) : result);\n                        if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                            subscriber.complete();\n                        }\n                    }\n                }, () => {\n                    completed[sourceIndex] = true;\n                    !buffers[sourceIndex].length && subscriber.complete();\n                }));\n            }\n            return () => {\n                buffers = completed = null;\n            };\n        })\n        : EMPTY;\n}\n//# sourceMappingURL=zip.js.map"]},"metadata":{},"sourceType":"module"}