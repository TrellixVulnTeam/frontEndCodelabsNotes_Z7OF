{"ast":null,"code":"import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function windowTime(windowTimeSpan) {\n  var _a, _b;\n\n  for (var _len = arguments.length, otherArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    otherArgs[_key - 1] = arguments[_key];\n  }\n\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n\n    var closeWindow = function closeWindow(record) {\n      var window = record.window,\n          subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    var startWindow = function startWindow() {\n      if (windowRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var window = new Subject();\n        var record = {\n          window: window,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record);\n        subscriber.next(window.asObservable());\n        executeSchedule(subs, scheduler, function () {\n          return closeWindow(record);\n        }, windowTimeSpan);\n      }\n    };\n\n    if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n      executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n    } else {\n      restartOnClose = true;\n    }\n\n    startWindow();\n\n    var loop = function loop(cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n\n    var terminate = function terminate(cb) {\n      loop(function (_ref) {\n        var window = _ref.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/windowTime.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function windowTime(windowTimeSpan, ...otherArgs) {\n    var _a, _b;\n    const scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n    const windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n    const maxWindowSize = otherArgs[1] || Infinity;\n    return operate((source, subscriber) => {\n        let windowRecords = [];\n        let restartOnClose = false;\n        const closeWindow = (record) => {\n            const { window, subs } = record;\n            window.complete();\n            subs.unsubscribe();\n            arrRemove(windowRecords, record);\n            restartOnClose && startWindow();\n        };\n        const startWindow = () => {\n            if (windowRecords) {\n                const subs = new Subscription();\n                subscriber.add(subs);\n                const window = new Subject();\n                const record = {\n                    window,\n                    subs,\n                    seen: 0,\n                };\n                windowRecords.push(record);\n                subscriber.next(window.asObservable());\n                executeSchedule(subs, scheduler, () => closeWindow(record), windowTimeSpan);\n            }\n        };\n        if (windowCreationInterval !== null && windowCreationInterval >= 0) {\n            executeSchedule(subscriber, scheduler, startWindow, windowCreationInterval, true);\n        }\n        else {\n            restartOnClose = true;\n        }\n        startWindow();\n        const loop = (cb) => windowRecords.slice().forEach(cb);\n        const terminate = (cb) => {\n            loop(({ window }) => cb(window));\n            cb(subscriber);\n            subscriber.unsubscribe();\n        };\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            loop((record) => {\n                record.window.next(value);\n                maxWindowSize <= ++record.seen && closeWindow(record);\n            });\n        }, () => terminate((consumer) => consumer.complete()), (err) => terminate((consumer) => consumer.error(err))));\n        return () => {\n            windowRecords = null;\n        };\n    });\n}\n//# sourceMappingURL=windowTime.js.map"]},"metadata":{},"sourceType":"module"}