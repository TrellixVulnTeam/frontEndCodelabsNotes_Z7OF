{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var buffer = [];\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      buffer.push(value);\n      count < buffer.length && buffer.shift();\n    }, function () {\n      var _iterator = _createForOfIteratorHelper(buffer),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var value = _step.value;\n          subscriber.next(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      subscriber.complete();\n    }, undefined, function () {\n      buffer = null;\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/takeLast.ts"],"names":[],"mappings":";AAAA,SAAS,KAAT,QAAsB,qBAAtB;AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AAyCA,OAAM,SAAU,QAAV,CAAsB,KAAtB,EAAmC;AACvC,SAAO,KAAK,IAAI,CAAT,GACH;AAAA,WAAM,KAAN;AAAA,GADG,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AAK7B,QAAI,MAAM,GAAQ,EAAlB;AACA,IAAA,MAAM,CAAC,SAAP,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAU;AAER,MAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AAGA,MAAA,KAAK,GAAG,MAAM,CAAC,MAAf,IAAyB,MAAM,CAAC,KAAP,EAAzB;AACD,KARqB,EAStB,YAAK;AAAA,iDAGiB,MAHjB;AAAA;;AAAA;AAGH,4DAA4B;AAAA,cAAjB,KAAiB;AAC1B,UAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD;AALE;AAAA;AAAA;AAAA;AAAA;;AAMH,MAAA,UAAU,CAAC,QAAX;AACD,KAhBqB,EAkBtB,SAlBsB,EAmBtB,YAAK;AAEH,MAAA,MAAM,GAAG,IAAT;AACD,KAtBqB,CAD1B;AA0BD,GAhCM,CAFX;AAmCD","sourceRoot":"","sourcesContent":["import { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function takeLast(count) {\n    return count <= 0\n        ? () => EMPTY\n        : operate((source, subscriber) => {\n            let buffer = [];\n            source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                buffer.push(value);\n                count < buffer.length && buffer.shift();\n            }, () => {\n                for (const value of buffer) {\n                    subscriber.next(value);\n                }\n                subscriber.complete();\n            }, undefined, () => {\n                buffer = null;\n            }));\n        });\n}\n//# sourceMappingURL=takeLast.js.map"]},"metadata":{},"sourceType":"module"}