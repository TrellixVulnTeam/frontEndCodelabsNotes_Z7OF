{"ast":null,"code":"import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var completions$;\n    var isNotifierComplete = false;\n    var isMainComplete = false;\n\n    var checkComplete = function checkComplete() {\n      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    };\n\n    var getCompletionSubject = function getCompletionSubject() {\n      if (!completions$) {\n        completions$ = new Subject();\n        notifier(completions$).subscribe(createOperatorSubscriber(subscriber, function () {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, function () {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n\n      return completions$;\n    };\n\n    var subscribeForRepeatWhen = function subscribeForRepeatWhen() {\n      isMainComplete = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, function () {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n\n    subscribeForRepeatWhen();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/repeatWhen.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,YAAxB;AAIA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AAmCA,OAAM,SAAU,UAAV,CAAwB,QAAxB,EAAsF;AAC1F,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AACpC,QAAI,QAAJ;AACA,QAAI,SAAS,GAAG,KAAhB;AACA,QAAI,YAAJ;AACA,QAAI,kBAAkB,GAAG,KAAzB;AACA,QAAI,cAAc,GAAG,KAArB;;AAKA,QAAM,aAAa,GAAG,SAAhB,aAAgB;AAAA,aAAM,cAAc,IAAI,kBAAlB,KAAyC,UAAU,CAAC,QAAX,IAAuB,IAAhE,CAAN;AAAA,KAAtB;;AAKA,QAAM,oBAAoB,GAAG,SAAvB,oBAAuB,GAAK;AAChC,UAAI,CAAC,YAAL,EAAmB;AACjB,QAAA,YAAY,GAAG,IAAI,OAAJ,EAAf;AAIA,QAAA,QAAQ,CAAC,YAAD,CAAR,CAAuB,SAAvB,CACE,wBAAwB,CACtB,UADsB,EAEtB,YAAK;AACH,cAAI,QAAJ,EAAc;AACZ,YAAA,sBAAsB;AACvB,WAFD,MAEO;AAKL,YAAA,SAAS,GAAG,IAAZ;AACD;AACF,SAZqB,EAatB,YAAK;AACH,UAAA,kBAAkB,GAAG,IAArB;AACA,UAAA,aAAa;AACd,SAhBqB,CAD1B;AAoBD;;AACD,aAAO,YAAP;AACD,KA5BD;;AA8BA,QAAM,sBAAsB,GAAG,SAAzB,sBAAyB,GAAK;AAClC,MAAA,cAAc,GAAG,KAAjB;AAEA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,wBAAwB,CAAC,UAAD,EAAa,SAAb,EAAwB,YAAK;AACnD,QAAA,cAAc,GAAG,IAAjB;AAMA,SAAC,aAAa,EAAd,IAAoB,oBAAoB,GAAG,IAAvB,EAApB;AACD,OARuB,CADf,CAAX;;AAYA,UAAI,SAAJ,EAAe;AAKb,QAAA,QAAQ,CAAC,WAAT;AAIA,QAAA,QAAQ,GAAG,IAAX;AAEA,QAAA,SAAS,GAAG,KAAZ;AAEA,QAAA,sBAAsB;AACvB;AACF,KA9BD;;AAiCA,IAAA,sBAAsB;AACvB,GA/Ea,CAAd;AAgFD","sourceRoot":"","sourcesContent":["import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function repeatWhen(notifier) {\n    return operate((source, subscriber) => {\n        let innerSub;\n        let syncResub = false;\n        let completions$;\n        let isNotifierComplete = false;\n        let isMainComplete = false;\n        const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n        const getCompletionSubject = () => {\n            if (!completions$) {\n                completions$ = new Subject();\n                notifier(completions$).subscribe(createOperatorSubscriber(subscriber, () => {\n                    if (innerSub) {\n                        subscribeForRepeatWhen();\n                    }\n                    else {\n                        syncResub = true;\n                    }\n                }, () => {\n                    isNotifierComplete = true;\n                    checkComplete();\n                }));\n            }\n            return completions$;\n        };\n        const subscribeForRepeatWhen = () => {\n            isMainComplete = false;\n            innerSub = source.subscribe(createOperatorSubscriber(subscriber, undefined, () => {\n                isMainComplete = true;\n                !checkComplete() && getCompletionSubject().next();\n            }));\n            if (syncResub) {\n                innerSub.unsubscribe();\n                innerSub = null;\n                syncResub = false;\n                subscribeForRepeatWhen();\n            }\n        };\n        subscribeForRepeatWhen();\n    });\n}\n//# sourceMappingURL=repeatWhen.js.map"]},"metadata":{},"sourceType":"module"}