{"ast":null,"code":"import _toConsumableArray from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\nexport function withLatestFrom() {\n  for (var _len = arguments.length, inputs = new Array(_len), _key = 0; _key < _len; _key++) {\n    inputs[_key] = arguments[_key];\n  }\n\n  var project = popResultSelector(inputs);\n  return operate(function (source, subscriber) {\n    var len = inputs.length;\n    var otherValues = new Array(len);\n    var hasValue = inputs.map(function () {\n      return false;\n    });\n    var ready = false;\n\n    var _loop = function _loop(i) {\n      innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, function (value) {\n        otherValues[i] = value;\n\n        if (!ready && !hasValue[i]) {\n          hasValue[i] = true;\n          (ready = hasValue.every(identity)) && (hasValue = null);\n        }\n      }, noop));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop(i);\n    }\n\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      if (ready) {\n        var values = [value].concat(otherValues);\n        subscriber.next(project ? project.apply(void 0, _toConsumableArray(values)) : values);\n      }\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/withLatestFrom.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,QAAT,QAAyB,kBAAzB;AACA,SAAS,IAAT,QAAqB,cAArB;AACA,SAAS,iBAAT,QAAkC,cAAlC;AAmDA,OAAM,SAAU,cAAV,GAA+C;AAAA,oCAAb,MAAa;AAAb,IAAA,MAAa;AAAA;;AACnD,MAAM,OAAO,GAAG,iBAAiB,CAAC,MAAD,CAAjC;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AACpC,QAAM,GAAG,GAAG,MAAM,CAAC,MAAnB;AACA,QAAM,WAAW,GAAG,IAAI,KAAJ,CAAU,GAAV,CAApB;AAIA,QAAI,QAAQ,GAAG,MAAM,CAAC,GAAP,CAAW;AAAA,aAAM,KAAN;AAAA,KAAX,CAAf;AAGA,QAAI,KAAK,GAAG,KAAZ;;AAToC,+BAe3B,CAf2B;AAgBlC,MAAA,SAAS,CAAC,MAAM,CAAC,CAAD,CAAP,CAAT,CAAqB,SAArB,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAU;AACR,QAAA,WAAW,CAAC,CAAD,CAAX,GAAiB,KAAjB;;AACA,YAAI,CAAC,KAAD,IAAU,CAAC,QAAQ,CAAC,CAAD,CAAvB,EAA4B;AAE1B,UAAA,QAAQ,CAAC,CAAD,CAAR,GAAc,IAAd;AAKA,WAAC,KAAK,GAAG,QAAQ,CAAC,KAAT,CAAe,QAAf,CAAT,MAAuC,QAAQ,GAAG,IAAlD;AACD;AACF,OAbqB,EAgBtB,IAhBsB,CAD1B;AAhBkC;;AAepC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,GAApB,EAAyB,CAAC,EAA1B,EAA8B;AAAA,YAArB,CAAqB;AAqB7B;;AAGD,IAAA,MAAM,CAAC,SAAP,CACE,wBAAwB,CAAC,UAAD,EAAa,UAAC,KAAD,EAAU;AAC7C,UAAI,KAAJ,EAAW;AAET,YAAM,MAAM,IAAI,KAAJ,SAAc,WAAd,CAAZ;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,OAAO,GAAG,OAAO,MAAP,4BAAW,MAAX,EAAH,GAAwB,MAA/C;AACD;AACF,KANuB,CAD1B;AASD,GAhDa,CAAd;AAiDD","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/innerFrom';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\nexport function withLatestFrom(...inputs) {\n    const project = popResultSelector(inputs);\n    return operate((source, subscriber) => {\n        const len = inputs.length;\n        const otherValues = new Array(len);\n        let hasValue = inputs.map(() => false);\n        let ready = false;\n        for (let i = 0; i < len; i++) {\n            innerFrom(inputs[i]).subscribe(createOperatorSubscriber(subscriber, (value) => {\n                otherValues[i] = value;\n                if (!ready && !hasValue[i]) {\n                    hasValue[i] = true;\n                    (ready = hasValue.every(identity)) && (hasValue = null);\n                }\n            }, noop));\n        }\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            if (ready) {\n                const values = [value, ...otherValues];\n                subscriber.next(project ? project(...values) : values);\n            }\n        }));\n    });\n}\n//# sourceMappingURL=withLatestFrom.js.map"]},"metadata":{},"sourceType":"module"}