{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry() {\n  var configOrCount = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _config = config,\n      _config$count = _config.count,\n      count = _config$count === void 0 ? Infinity : _config$count,\n      delay = _config.delay,\n      _config$resetOnSucces = _config.resetOnSuccess,\n      resetOnSuccess = _config$resetOnSucces === void 0 ? false : _config$resetOnSucces;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function subscribeForRetry() {\n      var syncUnsub = false;\n      innerSub = source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub = function resub() {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber = createOperatorSubscriber(subscriber, function () {\n              notifierSubscriber.unsubscribe();\n              resub();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber);\n          } else {\n            resub();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/retry.ts"],"names":[],"mappings":"AACA,SAAS,OAAT,QAAwB,cAAxB;AAEA,SAAS,wBAAT,QAAyC,sBAAzC;AACA,SAAS,QAAT,QAAyB,kBAAzB;AACA,SAAS,KAAT,QAAsB,qBAAtB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AA4EA,OAAM,SAAU,KAAV,GAAiE;AAAA,MAA9C,aAA8C,uEAAR,QAAQ;AACrE,MAAI,MAAJ;;AACA,MAAI,aAAa,IAAI,OAAO,aAAP,KAAyB,QAA9C,EAAwD;AACtD,IAAA,MAAM,GAAG,aAAT;AACD,GAFD,MAEO;AACL,IAAA,MAAM,GAAG;AACP,MAAA,KAAK,EAAE;AADA,KAAT;AAGD;;AACD,gBAA4E,MAA5E;AAAA,8BAAQ,KAAR;AAAA,MAAQ,KAAR,8BAAgB,QAAhB;AAAA,MAA0B,KAA1B,WAA0B,KAA1B;AAAA,sCAAiC,cAAjC;AAAA,MAAiD,cAAjD,sCAAkE,KAAlE;AAEA,SAAO,KAAK,IAAI,CAAT,GACH,QADG,GAEH,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AAC7B,QAAI,KAAK,GAAG,CAAZ;AACA,QAAI,QAAJ;;AACA,QAAM,iBAAiB,GAAG,SAApB,iBAAoB,GAAK;AAC7B,UAAI,SAAS,GAAG,KAAhB;AACA,MAAA,QAAQ,GAAG,MAAM,CAAC,SAAP,CACT,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAU;AAER,YAAI,cAAJ,EAAoB;AAClB,UAAA,KAAK,GAAG,CAAR;AACD;;AACD,QAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD,OARqB,EAUtB,SAVsB,EAWtB,UAAC,GAAD,EAAQ;AACN,YAAI,KAAK,KAAK,KAAd,EAAqB;AAEnB,cAAM,KAAK,GAAG,SAAR,KAAQ,GAAK;AACjB,gBAAI,QAAJ,EAAc;AACZ,cAAA,QAAQ,CAAC,WAAT;AACA,cAAA,QAAQ,GAAG,IAAX;AACA,cAAA,iBAAiB;AAClB,aAJD,MAIO;AACL,cAAA,SAAS,GAAG,IAAZ;AACD;AACF,WARD;;AAUA,cAAI,KAAK,IAAI,IAAb,EAAmB;AAIjB,gBAAM,QAAQ,GAAG,OAAO,KAAP,KAAiB,QAAjB,GAA4B,KAAK,CAAC,KAAD,CAAjC,GAA2C,SAAS,CAAC,KAAK,CAAC,GAAD,EAAM,KAAN,CAAN,CAArE;AACA,gBAAM,kBAAkB,GAAG,wBAAwB,CACjD,UADiD,EAEjD,YAAK;AAIH,cAAA,kBAAkB,CAAC,WAAnB;AACA,cAAA,KAAK;AACN,aARgD,EASjD,YAAK;AAGH,cAAA,UAAU,CAAC,QAAX;AACD,aAbgD,CAAnD;AAeA,YAAA,QAAQ,CAAC,SAAT,CAAmB,kBAAnB;AACD,WArBD,MAqBO;AAEL,YAAA,KAAK;AACN;AACF,SArCD,MAqCO;AAGL,UAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD;AACF,OAtDqB,CADf,CAAX;;AA0DA,UAAI,SAAJ,EAAe;AACb,QAAA,QAAQ,CAAC,WAAT;AACA,QAAA,QAAQ,GAAG,IAAX;AACA,QAAA,iBAAiB;AAClB;AACF,KAjED;;AAkEA,IAAA,iBAAiB;AAClB,GAtEM,CAFX;AAyED","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\nimport { timer } from '../observable/timer';\nimport { innerFrom } from '../observable/innerFrom';\nexport function retry(configOrCount = Infinity) {\n    let config;\n    if (configOrCount && typeof configOrCount === 'object') {\n        config = configOrCount;\n    }\n    else {\n        config = {\n            count: configOrCount,\n        };\n    }\n    const { count = Infinity, delay, resetOnSuccess: resetOnSuccess = false } = config;\n    return count <= 0\n        ? identity\n        : operate((source, subscriber) => {\n            let soFar = 0;\n            let innerSub;\n            const subscribeForRetry = () => {\n                let syncUnsub = false;\n                innerSub = source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n                    if (resetOnSuccess) {\n                        soFar = 0;\n                    }\n                    subscriber.next(value);\n                }, undefined, (err) => {\n                    if (soFar++ < count) {\n                        const resub = () => {\n                            if (innerSub) {\n                                innerSub.unsubscribe();\n                                innerSub = null;\n                                subscribeForRetry();\n                            }\n                            else {\n                                syncUnsub = true;\n                            }\n                        };\n                        if (delay != null) {\n                            const notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n                            const notifierSubscriber = createOperatorSubscriber(subscriber, () => {\n                                notifierSubscriber.unsubscribe();\n                                resub();\n                            }, () => {\n                                subscriber.complete();\n                            });\n                            notifier.subscribe(notifierSubscriber);\n                        }\n                        else {\n                            resub();\n                        }\n                    }\n                    else {\n                        subscriber.error(err);\n                    }\n                }));\n                if (syncUnsub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                }\n            };\n            subscribeForRetry();\n        });\n}\n//# sourceMappingURL=retry.js.map"]},"metadata":{},"sourceType":"module"}