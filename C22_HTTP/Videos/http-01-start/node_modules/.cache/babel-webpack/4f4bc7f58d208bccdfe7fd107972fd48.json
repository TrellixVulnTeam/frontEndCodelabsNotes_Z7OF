{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper\";\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize) {\n  var startWindowEvery = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return operate(function (source, subscriber) {\n    var windows = [new Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(createOperatorSubscriber(subscriber, function (value) {\n      var _iterator = _createForOfIteratorHelper(windows),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _window = _step.value;\n\n          _window.next(value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      var c = count - windowSize + 1;\n\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n\n      if (++count % startEvery === 0) {\n        var window = new Subject();\n        windows.push(window);\n        subscriber.next(window.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/windowCount.ts"],"names":[],"mappings":";AACA,SAAS,OAAT,QAAwB,YAAxB;AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AAgEA,OAAM,SAAU,WAAV,CAAyB,UAAzB,EAAyE;AAAA,MAA5B,gBAA4B,uEAAD,CAAC;AAC7E,MAAM,UAAU,GAAG,gBAAgB,GAAG,CAAnB,GAAuB,gBAAvB,GAA0C,UAA7D;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AACpC,QAAI,OAAO,GAAG,CAAC,IAAI,OAAJ,EAAD,CAAd;AACA,QAAI,MAAM,GAAa,EAAvB;AACA,QAAI,KAAK,GAAG,CAAZ;AAGA,IAAA,UAAU,CAAC,IAAX,CAAgB,OAAO,CAAC,CAAD,CAAP,CAAW,YAAX,EAAhB;AAEA,IAAA,MAAM,CAAC,SAAP,CACE,wBAAwB,CACtB,UADsB,EAEtB,UAAC,KAAD,EAAa;AAAA,iDAIU,OAJV;AAAA;;AAAA;AAIX,4DAA8B;AAAA,cAAnB,OAAmB;;AAC5B,UAAA,OAAM,CAAC,IAAP,CAAY,KAAZ;AACD;AANU;AAAA;AAAA;AAAA;AAAA;;AAYX,UAAM,CAAC,GAAG,KAAK,GAAG,UAAR,GAAqB,CAA/B;;AACA,UAAI,CAAC,IAAI,CAAL,IAAU,CAAC,GAAG,UAAJ,KAAmB,CAAjC,EAAoC;AAClC,QAAA,OAAO,CAAC,KAAR,GAAiB,QAAjB;AACD;;AAOD,UAAI,EAAE,KAAF,GAAU,UAAV,KAAyB,CAA7B,EAAgC;AAC9B,YAAM,MAAM,GAAG,IAAI,OAAJ,EAAf;AACA,QAAA,OAAO,CAAC,IAAR,CAAa,MAAb;AACA,QAAA,UAAU,CAAC,IAAX,CAAgB,MAAM,CAAC,YAAP,EAAhB;AACD;AACF,KA7BqB,EA8BtB,YAAK;AACH,aAAO,OAAO,CAAC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,QAAA,OAAO,CAAC,KAAR,GAAiB,QAAjB;AACD;;AACD,MAAA,UAAU,CAAC,QAAX;AACD,KAnCqB,EAoCtB,UAAC,GAAD,EAAQ;AACN,aAAO,OAAO,CAAC,MAAR,GAAiB,CAAxB,EAA2B;AACzB,QAAA,OAAO,CAAC,KAAR,GAAiB,KAAjB,CAAuB,GAAvB;AACD;;AACD,MAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACD,KAzCqB,EA0CtB,YAAK;AACH,MAAA,MAAM,GAAG,IAAT;AACA,MAAA,OAAO,GAAG,IAAV;AACD,KA7CqB,CAD1B;AAiDD,GAzDa,CAAd;AA0DD","sourceRoot":"","sourcesContent":["import { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function windowCount(windowSize, startWindowEvery = 0) {\n    const startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n    return operate((source, subscriber) => {\n        let windows = [new Subject()];\n        let starts = [];\n        let count = 0;\n        subscriber.next(windows[0].asObservable());\n        source.subscribe(createOperatorSubscriber(subscriber, (value) => {\n            for (const window of windows) {\n                window.next(value);\n            }\n            const c = count - windowSize + 1;\n            if (c >= 0 && c % startEvery === 0) {\n                windows.shift().complete();\n            }\n            if (++count % startEvery === 0) {\n                const window = new Subject();\n                windows.push(window);\n                subscriber.next(window.asObservable());\n            }\n        }, () => {\n            while (windows.length > 0) {\n                windows.shift().complete();\n            }\n            subscriber.complete();\n        }, (err) => {\n            while (windows.length > 0) {\n                windows.shift().error(err);\n            }\n            subscriber.error(err);\n        }, () => {\n            starts = null;\n            windows = null;\n        }));\n    });\n}\n//# sourceMappingURL=windowCount.js.map"]},"metadata":{},"sourceType":"module"}