{"ast":null,"code":"import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function sequenceEqual(compareTo) {\n  var comparator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : function (a, b) {\n    return a === b;\n  };\n  return operate(function (source, subscriber) {\n    var aState = createState();\n    var bState = createState();\n\n    var emit = function emit(isEqual) {\n      subscriber.next(isEqual);\n      subscriber.complete();\n    };\n\n    var createSubscriber = function createSubscriber(selfState, otherState) {\n      var sequenceEqualSubscriber = createOperatorSubscriber(subscriber, function (a) {\n        var buffer = otherState.buffer,\n            complete = otherState.complete;\n\n        if (buffer.length === 0) {\n          complete ? emit(false) : selfState.buffer.push(a);\n        } else {\n          !comparator(a, buffer.shift()) && emit(false);\n        }\n      }, function () {\n        selfState.complete = true;\n        var complete = otherState.complete,\n            buffer = otherState.buffer;\n        complete && emit(buffer.length === 0);\n        sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();\n      });\n      return sequenceEqualSubscriber;\n    };\n\n    source.subscribe(createSubscriber(aState, bState));\n    compareTo.subscribe(createSubscriber(bState, aState));\n  });\n}\n\nfunction createState() {\n  return {\n    buffer: [],\n    complete: false\n  };\n}","map":{"version":3,"sources":["../../../../src/internal/operators/sequenceEqual.ts"],"names":[],"mappings":"AAGA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AAyDA,OAAM,SAAU,aAAV,CACJ,SADI,EAEmD;AAAA,MAAvD,UAAuD,uEAAjB,UAAC,CAAD,EAAI,CAAJ;AAAA,WAAU,CAAC,KAAK,CAAhB;AAAA,GAAiB;AAEvD,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AAEpC,QAAM,MAAM,GAAG,WAAW,EAA1B;AAEA,QAAM,MAAM,GAAG,WAAW,EAA1B;;AAGA,QAAM,IAAI,GAAG,SAAP,IAAO,CAAC,OAAD,EAAqB;AAChC,MAAA,UAAU,CAAC,IAAX,CAAgB,OAAhB;AACA,MAAA,UAAU,CAAC,QAAX;AACD,KAHD;;AAUA,QAAM,gBAAgB,GAAG,SAAnB,gBAAmB,CAAC,SAAD,EAA8B,UAA9B,EAA8D;AACrF,UAAM,uBAAuB,GAAG,wBAAwB,CACtD,UADsD,EAEtD,UAAC,CAAD,EAAS;AACP,YAAQ,MAAR,GAA6B,UAA7B,CAAQ,MAAR;AAAA,YAAgB,QAAhB,GAA6B,UAA7B,CAAgB,QAAhB;;AACA,YAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;AAOvB,UAAA,QAAQ,GAAG,IAAI,CAAC,KAAD,CAAP,GAAiB,SAAS,CAAC,MAAV,CAAiB,IAAjB,CAAsB,CAAtB,CAAzB;AACD,SARD,MAQO;AAIL,WAAC,UAAU,CAAC,CAAD,EAAI,MAAM,CAAC,KAAP,EAAJ,CAAX,IAAmC,IAAI,CAAC,KAAD,CAAvC;AACD;AACF,OAlBqD,EAmBtD,YAAK;AAEH,QAAA,SAAS,CAAC,QAAV,GAAqB,IAArB;AACA,YAAQ,QAAR,GAA6B,UAA7B,CAAQ,QAAR;AAAA,YAAkB,MAAlB,GAA6B,UAA7B,CAAkB,MAAlB;AAKA,QAAA,QAAQ,IAAI,IAAI,CAAC,MAAM,CAAC,MAAP,KAAkB,CAAnB,CAAhB;AAEA,QAAA,uBAAuB,KAAA,IAAvB,IAAA,uBAAuB,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAA,uBAAuB,CAAE,WAAzB,EAAA;AACD,OA9BqD,CAAxD;AAiCA,aAAO,uBAAP;AACD,KAnCD;;AAsCA,IAAA,MAAM,CAAC,SAAP,CAAiB,gBAAgB,CAAC,MAAD,EAAS,MAAT,CAAjC;AACA,IAAA,SAAS,CAAC,SAAV,CAAoB,gBAAgB,CAAC,MAAD,EAAS,MAAT,CAApC;AACD,GAzDa,CAAd;AA0DD;;AAgBD,SAAS,WAAT,GAAoB;AAClB,SAAO;AACL,IAAA,MAAM,EAAE,EADH;AAEL,IAAA,QAAQ,EAAE;AAFL,GAAP;AAID","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nexport function sequenceEqual(compareTo, comparator = (a, b) => a === b) {\n    return operate((source, subscriber) => {\n        const aState = createState();\n        const bState = createState();\n        const emit = (isEqual) => {\n            subscriber.next(isEqual);\n            subscriber.complete();\n        };\n        const createSubscriber = (selfState, otherState) => {\n            const sequenceEqualSubscriber = createOperatorSubscriber(subscriber, (a) => {\n                const { buffer, complete } = otherState;\n                if (buffer.length === 0) {\n                    complete ? emit(false) : selfState.buffer.push(a);\n                }\n                else {\n                    !comparator(a, buffer.shift()) && emit(false);\n                }\n            }, () => {\n                selfState.complete = true;\n                const { complete, buffer } = otherState;\n                complete && emit(buffer.length === 0);\n                sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();\n            });\n            return sequenceEqualSubscriber;\n        };\n        source.subscribe(createSubscriber(aState, bState));\n        compareTo.subscribe(createSubscriber(bState, aState));\n    });\n}\nfunction createState() {\n    return {\n        buffer: [],\n        complete: false,\n    };\n}\n//# sourceMappingURL=sequenceEqual.js.map"]},"metadata":{},"sourceType":"module"}