{"ast":null,"code":"import _classCallCheck from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _get from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/get\";\nimport _getPrototypeOf from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport var ReplaySubject = /*#__PURE__*/function (_Subject) {\n  _inherits(ReplaySubject, _Subject);\n\n  var _super = _createSuper(ReplaySubject);\n\n  function ReplaySubject() {\n    var _this;\n\n    var _bufferSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : Infinity;\n\n    var _windowTime = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n\n    var _timestampProvider = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : dateTimestampProvider;\n\n    _classCallCheck(this, ReplaySubject);\n\n    _this = _super.call(this);\n    _this._bufferSize = _bufferSize;\n    _this._windowTime = _windowTime;\n    _this._timestampProvider = _timestampProvider;\n    _this._buffer = [];\n    _this._infiniteTimeWindow = true;\n    _this._infiniteTimeWindow = _windowTime === Infinity;\n    _this._bufferSize = Math.max(1, _bufferSize);\n    _this._windowTime = Math.max(1, _windowTime);\n    return _this;\n  }\n\n  _createClass(ReplaySubject, [{\n    key: \"next\",\n    value: function next(value) {\n      var isStopped = this.isStopped,\n          _buffer = this._buffer,\n          _infiniteTimeWindow = this._infiniteTimeWindow,\n          _timestampProvider = this._timestampProvider,\n          _windowTime = this._windowTime;\n\n      if (!isStopped) {\n        _buffer.push(value);\n\n        !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n      }\n\n      this._trimBuffer();\n\n      _get(_getPrototypeOf(ReplaySubject.prototype), \"next\", this).call(this, value);\n    }\n  }, {\n    key: \"_subscribe\",\n    value: function _subscribe(subscriber) {\n      this._throwIfClosed();\n\n      this._trimBuffer();\n\n      var subscription = this._innerSubscribe(subscriber);\n\n      var _infiniteTimeWindow = this._infiniteTimeWindow,\n          _buffer = this._buffer;\n\n      var copy = _buffer.slice();\n\n      for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n        subscriber.next(copy[i]);\n      }\n\n      this._checkFinalizedStatuses(subscriber);\n\n      return subscription;\n    }\n  }, {\n    key: \"_trimBuffer\",\n    value: function _trimBuffer() {\n      var _bufferSize = this._bufferSize,\n          _timestampProvider = this._timestampProvider,\n          _buffer = this._buffer,\n          _infiniteTimeWindow = this._infiniteTimeWindow;\n      var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n      _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n      if (!_infiniteTimeWindow) {\n        var now = _timestampProvider.now();\n\n        var last = 0;\n\n        for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n          last = i;\n        }\n\n        last && _buffer.splice(0, last + 1);\n      }\n    }\n  }]);\n\n  return ReplaySubject;\n}(Subject);","map":{"version":3,"sources":["../../../src/internal/ReplaySubject.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Subject } from './Subject';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\nexport class ReplaySubject extends Subject {\n    constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {\n        super();\n        this._bufferSize = _bufferSize;\n        this._windowTime = _windowTime;\n        this._timestampProvider = _timestampProvider;\n        this._buffer = [];\n        this._infiniteTimeWindow = true;\n        this._infiniteTimeWindow = _windowTime === Infinity;\n        this._bufferSize = Math.max(1, _bufferSize);\n        this._windowTime = Math.max(1, _windowTime);\n    }\n    next(value) {\n        const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n        if (!isStopped) {\n            _buffer.push(value);\n            !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n        }\n        this._trimBuffer();\n        super.next(value);\n    }\n    _subscribe(subscriber) {\n        this._throwIfClosed();\n        this._trimBuffer();\n        const subscription = this._innerSubscribe(subscriber);\n        const { _infiniteTimeWindow, _buffer } = this;\n        const copy = _buffer.slice();\n        for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n            subscriber.next(copy[i]);\n        }\n        this._checkFinalizedStatuses(subscriber);\n        return subscription;\n    }\n    _trimBuffer() {\n        const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n        const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n        _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n        if (!_infiniteTimeWindow) {\n            const now = _timestampProvider.now();\n            let last = 0;\n            for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n                last = i;\n            }\n            last && _buffer.splice(0, last + 1);\n        }\n    }\n}\n//# sourceMappingURL=ReplaySubject.js.map"]},"metadata":{},"sourceType":"module"}