{"ast":null,"code":"import _toConsumableArray from \"/Users/maryanderson/Documents/GitHub/Local-Codelabs-Repository/C22_HTTP/Videos/http-01-start/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function onErrorResumeNext() {\n  for (var _len = arguments.length, sources = new Array(_len), _key = 0; _key < _len; _key++) {\n    sources[_key] = arguments[_key];\n  }\n\n  var nextSources = argsOrArgArray(sources);\n  return operate(function (source, subscriber) {\n    var remaining = [source].concat(_toConsumableArray(nextSources));\n\n    var subscribeNext = function subscribeNext() {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          var nextSource;\n\n          try {\n            nextSource = innerFrom(remaining.shift());\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          var innerSub = createOperatorSubscriber(subscriber, undefined, noop, noop);\n          nextSource.subscribe(innerSub);\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/operators/onErrorResumeNext.ts"],"names":[],"mappings":";AAEA,SAAS,OAAT,QAAwB,cAAxB;AACA,SAAS,SAAT,QAA0B,yBAA1B;AACA,SAAS,cAAT,QAA+B,wBAA/B;AACA,SAAS,wBAAT,QAAyC,sBAAzC;AACA,SAAS,IAAT,QAAqB,cAArB;AAiFA,OAAM,SAAU,iBAAV,GACqE;AAAA,oCAAtE,OAAsE;AAAtE,IAAA,OAAsE;AAAA;;AAMzE,MAAM,WAAW,GAAG,cAAc,CAAC,OAAD,CAAlC;AAEA,SAAO,OAAO,CAAC,UAAC,MAAD,EAAS,UAAT,EAAuB;AACpC,QAAM,SAAS,IAAI,MAAJ,4BAAe,WAAf,EAAf;;AACA,QAAM,aAAa,GAAG,SAAhB,aAAgB,GAAK;AACzB,UAAI,CAAC,UAAU,CAAC,MAAhB,EAAwB;AACtB,YAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;AACxB,cAAI,UAAJ;;AACA,cAAI;AACF,YAAA,UAAU,GAAG,SAAS,CAAgB,SAAS,CAAC,KAAV,EAAhB,CAAtB;AACD,WAFD,CAEE,OAAO,GAAP,EAAY;AACZ,YAAA,aAAa;AACb;AACD;;AAMD,cAAM,QAAQ,GAAG,wBAAwB,CAAC,UAAD,EAAa,SAAb,EAAwB,IAAxB,EAA8B,IAA9B,CAAzC;AACA,UAAA,UAAU,CAAC,SAAX,CAAqB,QAArB;AACA,UAAA,QAAQ,CAAC,GAAT,CAAa,aAAb;AACD,SAhBD,MAgBO;AACL,UAAA,UAAU,CAAC,QAAX;AACD;AACF;AACF,KAtBD;;AAwBA,IAAA,aAAa;AACd,GA3Ba,CAAd;AA4BD","sourceRoot":"","sourcesContent":["import { operate } from '../util/lift';\nimport { innerFrom } from '../observable/innerFrom';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { createOperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nexport function onErrorResumeNext(...sources) {\n    const nextSources = argsOrArgArray(sources);\n    return operate((source, subscriber) => {\n        const remaining = [source, ...nextSources];\n        const subscribeNext = () => {\n            if (!subscriber.closed) {\n                if (remaining.length > 0) {\n                    let nextSource;\n                    try {\n                        nextSource = innerFrom(remaining.shift());\n                    }\n                    catch (err) {\n                        subscribeNext();\n                        return;\n                    }\n                    const innerSub = createOperatorSubscriber(subscriber, undefined, noop, noop);\n                    nextSource.subscribe(innerSub);\n                    innerSub.add(subscribeNext);\n                }\n                else {\n                    subscriber.complete();\n                }\n            }\n        };\n        subscribeNext();\n    });\n}\n//# sourceMappingURL=onErrorResumeNext.js.map"]},"metadata":{},"sourceType":"module"}